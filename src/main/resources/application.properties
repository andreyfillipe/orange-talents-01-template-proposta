spring.profiles.active=dev
server.port=8081

#Dados da aplicacao
url.proposta.analise=${ANALISE_ENDPOINT:http://localhost:9999/api/solicitacao}
url.proposta.cartao=${CONTA_ENDPOINT:http://localhost:8888/api/cartoes}
cartao.consulta=10000

#Keycloak
#spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}

#Actuator prometheus
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true
management.metrics.tags.aplicacao=servico de proposta
management.metrics.tags.ambiente=desenvolvimento
management.health.probes.enabled=true
management.endpoint.health.status.http-mapping.down=503
management.endpoint.health.status.http-mapping.fatal=503
management.endpoint.health.status.http-mapping.out-of-service=503

#Jaeger
#Habilita ou nao
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
#Nome do servico
opentracing.jaeger.service-name=${spring.application.name}
#Endereco para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
#Tipo de amostragem (probabilistico) e sua configuracao (1 = 100 porcento)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}